#!/usr/bin/env ruby
# frozen_string_literal: true

unless ENV["RACK_ENV"] == "production"
  require "highline/import"
  require "dotenv"
  Dotenv.load
end

require "octokit"
require "prius"

require File.expand_path("../../app/workers/dependency_file_fetcher", __FILE__)

github_client = Octokit::Client.new(access_token: Prius.get(:bump_github_token))
repo_validator = lambda do |repo_name|
  begin
    github_client.repository(repo_name)
    true
  rescue Octokit::NotFound
    false
  end
end

package_manager_validator = ->(l) { %w(bundler yarn pip).include?(l) }

if ARGV.empty?
  repo =
    ask("Which repo would you like to bump dependencies for? ") do |question|
      question.validate = repo_validator
      question.responses[:invalid_type] =
        "Could not access that repo. Make sure you use the format "\
        "'gocardless/bump', and that your GitHub token has read/write "\
        "access to the given repo."
    end

  package_manager = ARGV[1] || choose do |menu|
    menu.header = "Which package manager would you like to bump dependencies for?"
    menu.index = :none
    menu.choices(:bundler, :yarn, :pip)
  end
else
  repo = ARGV[0]
  package_manager = ARGV[1]

  unless repo_validator.call(repo) && package_manager_validator.call(package_manager)
    puts "Bad repo/package_manager"
    raise
  end
end

Workers::DependencyFileFetcher.
  perform_async("repo" => { "package_manager" => package_manager, "name" => repo })

puts "Great success - a job has been enqueued to bump the "\
  "#{package_manager} dependency files for #{repo}."
